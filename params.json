{"name":"obs","tagline":"Observable properties done right.","body":"# Synopsis\r\n\r\n**obs** is a powerful implementation of observable properties that can be used on both the client-side and the server-side.\r\n\r\nTogether with [rivets.js](http://rivetsjs.com) it can serve as a lightweight alternative to [Knockout.js](http://knockoutjs.com).\r\n\r\n[![browser support](https://ci.testling.com/pluma/obs.js.png)](https://ci.testling.com/pluma/obs.js)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/obs.js.png?branch=master)](https://travis-ci.org/pluma/obs.js)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install obs\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/obs.js.git\r\ncd obs.js\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/obs.js\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/obs.js/master/dist/obs.min.js) and add it to your project.\r\n\r\nMake sure you also have a compatible copy of [aug](https://github.com/jgallen23/aug) and [sublish](https://github.com/pluma/sublish).\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/obs.js/master/dist/obs.amd.min.js) and add it to your project.\r\n\r\nMake sure you also have a compatible copy of [aug](https://github.com/jgallen23/aug) and [sublish](https://github.com/pluma/sublish).\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As standalone bundle\r\n\r\nGet the [latest distribution bundle](https://raw.github.com/pluma/obs.js/master/dist/obs.all.min.js) (~3.5 kB or ~1.3 kB gzipped, includes [aug 0.0.5](https://github.com/jgallen23/aug/tree/0.0.5) and [sublish 0.4.2](https://github.com/pluma/sublish/tree/0.3.0)) and download it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/obs.all.min.js\"></script>\r\n```\r\n\r\nThis makes the `obs` module available in the global namespace.\r\n\r\nIf you are already using `aug` and `sublish` in your project, you can download the [latest minified standalone release](https://raw.github.com/pluma/obs.js/master/dist/obs.globals.min.js) (~2.5 kB or ~0.9 kB minified) instead.\r\n\r\n# Basic usage example with node.js\r\n\r\n```javascript\r\nvar obs = require('obs');\r\nvar x = obs.prop(2),\r\n    y = obs.prop(5),\r\n    sum = obs.computed(function() {\r\n        return x() + y();\r\n    }, [x, y]),\r\n    product = obs.computed(function() {\r\n        return x() * y();\r\n    }, [x, y]);\r\n\r\nconsole.log('sum is currently ' + sum());\r\n// 'sum is currently 7'\r\nconsole.log('product is currently ' + product());\r\n// 'product is currently 10'\r\n\r\nsum.subscribe(function(value, old) {\r\n    console.log('sum is now ' + value + ' (was: ' + old + ')');\r\n});\r\nproduct.subscribe(function(value, old) {\r\n    console.log('product is now ' + value + ' (was: ' + old + ')');\r\n});\r\n\r\nx(3);\r\n// 'sum is now 8 (was: 7)'\r\n// 'product is now 15 (was: 10)'\r\nconsole.log('sum is currently ' + sum());\r\n// 'sum is currently 8'\r\ny(8);\r\n// 'sum is now 11 (was: 8)'\r\n// 'product is now 24 (was: 15)'\r\n```\r\n\r\n# Client-side example with [rivets.js](http://rivetsjs.com) data-binding\r\n\r\nTry it on [jsfiddle](http://jsfiddle.net/QdLxc/3/).\r\n\r\n## HTML\r\n\r\n```html\r\n<div id=\"view\">\r\n    <label>\r\n        Your name:\r\n        <input data-rv-value=\"user.name\"/>\r\n    </label>\r\n    <div data-rv-bgcolor=\"color\">\r\n        Hello <span data-rv-text=\"user.name\"></span>!<br>\r\n        The current UNIX time is: <span data-rv-text=\"now\"></span>\r\n    </div>\r\n</div>\r\n```\r\n\r\n## CSS\r\n\r\n```css\r\n#view {\r\n    font: 16px Verdana, Arial, sans-serif;\r\n}\r\n#view div {\r\n    padding: 10px;\r\n}\r\n```\r\n\r\n## JavaScript\r\n\r\n### Utilities\r\n\r\n```javascript\r\nvar colors = [\r\n    'rgba(255,0,0,0.5)', 'rgba(255,255,0,0.5)',\r\n    'rgba(0,255,0,0.5)', 'rgba(0,255,255,0.5)',\r\n    'rgba(0,0,255,0.5)', 'rgba(255,0,255,0.5)'\r\n];\r\nfunction resolveKeypath(obj, keypath) {\r\n    keypath.split('.').forEach(function(key) {\r\n        if (key) {\r\n            obj = obj[key];\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n```\r\n\r\n### Rivets.js adapter and configuration\r\n```javascript\r\nrivets.configure({\r\n    prefix: 'rv',\r\n    adapter: {\r\n        subscribe: function(obj, keypath, callback) {\r\n            resolveKeypath(obj, keypath).subscribe(callback);\r\n        },\r\n        unsubscribe: function(obj, keypath, callback) {\r\n            resolveKeypath(obj, keypath).unsubscribe(callback);\r\n        },\r\n        read: function(obj, keypath) {\r\n            return resolveKeypath(obj, keypath)();\r\n        },\r\n        publish: function(obj, keypath, value) {\r\n            resolveKeypath(obj, keypath)(value);\r\n        }\r\n    }\r\n});\r\n\r\nrivets.binders.bgcolor = function(el, value) {\r\n    el.style.backgroundColor = value;\r\n};\r\n```\r\n\r\n### ViewModel (using obs.js)\r\n\r\n```javascript\r\nvar viewModel = {\r\n    now: obs.prop(+new Date()),\r\n    color: obs.prop(colors[0]),\r\n    user: {\r\n        name: obs.prop('User')\r\n    }\r\n};\r\n\r\nvar view = rivets.bind($('#view'), viewModel);\r\n\r\nsetInterval(function() {\r\n    viewModel.now(+new Date());\r\n    viewModel.color(colors[\r\n        Math.floor(Math.random() * colors.length)\r\n    ]);\r\n}, 3000);\r\n```\r\n\r\n# API\r\n\r\n## prop: Observable properties\r\n\r\n### prop([initialValue])\r\n\r\nCreates an observable property (optionally initialised with the given value).\r\n\r\n### prop#()\r\n\r\nReturns the property's current value.\r\n\r\n### prop#(newValue)\r\n\r\nSets the property's value to `newValue`. Notifies all subscribers with the new and old value.\r\n\r\n### prop#subscribe(callback:Function)\r\n\r\nAdds the given callback function to this property's list of subscribers.\r\n\r\nThe callback will be called with the property's new and old value as its arguments whenever the property is set to a new value (even if the new value is equal to the old value).\r\n\r\n### prop#unsubscribe(callback:Function):Boolean\r\n\r\nRemoves the given callback function from this property's list of subscribers. The callback will no longer be called when the property's value changes.\r\n\r\nReturns `false` if the callback could not be found in the list of subscribers or `true` otherwise.\r\n\r\n**NOTE:** Remember to use the exact function that was passed to `prop#subscribe`.\r\n\r\n### prop#peek()\r\n\r\nReturns the property's current value. This method mainly exists for compatibility reasons.\r\n\r\n### prop#reset()\r\n\r\nResets the property to its initial value (or `undefined`).\r\n\r\n### prop.fn\r\n\r\nAn object containing attributes that will be applied to new observable properties.\r\n\r\n## computed: Computed observables\r\n\r\n### computed(readFn:Function, [watched:Array], [lazy:Boolean])\r\n\r\nCreates a computed observable property. The property's value will be set to the return value of the given function `readFn` and updated whenever any of the `watched` functions changes.\r\n\r\nIf `lazy` is set to `true` (default: `false`), updating of the property's new value will be delayed until the first time the property is called. This also means subscribers will not be notified until the property is called directly.\r\n\r\nThe list of `watched` functions can be an array containing any kind of object that supports the `subscribe` and (optionally) `unsubscribe` methods (e.g. an instance of `sublish.PubSub`). If a single object is passed instead of an array, the object will automatically be wrapped in an array.\r\n\r\n### computed(options)\r\n\r\nCreates a computed observable property with the given options.\r\n\r\n#### read:Function (optional)\r\n\r\nThe function this computed observable will use to generate its value. If this option is not provided, the observable will be write-only.\r\n\r\n**NOTE**: This option is only optional if a `write` function is provided.\r\n\r\n#### write:Function (optional)\r\n\r\nThe function this computed observable will use when it is passed a value. If this option is not provided, the observable will be read-only.\r\n\r\n**NOTE**: This option is only optional if a `read` function is provided.\r\n\r\n#### lazy:Boolean (optional)\r\n\r\nSee above. This option has no effect if no `read` function is provided.\r\n\r\n#### watched:Array (optional)\r\n\r\nSee above. This option has no effect if no `read` function is provided. If a single function is provided instead of an array, it is wrapped in an array automatically.\r\n\r\n### computed#()\r\n\r\nReturns the computed property's current value. For lazy computed observables, this will trigger the function evaluation and notify any subscribers.\r\n\r\n### computed#subscribe(callback:Function)\r\n\r\nAdds the given callback function to this property's list of subscribers. See `prop#subscribe`.\r\n\r\n### computed#unsubscribe(callback:Function)\r\n\r\nRemoves the given callback function from this property#s list of subscribers. See `prop#unsubscribe`.\r\n\r\n### computed#peek()\r\n\r\nReturns the computed property's current value. Unlike `computed#()` this will not trigger the function evaluation in lazy computed observables.\r\n\r\n### computed#watch(dependencies…)\r\n\r\nAdds the given objects as dependencies. The passed objects should support the `subscribe` method and optionally support the `unsubscribe` method.\r\n\r\n### computed#unwatch(dependencies…)\r\n\r\nRemoves the given objects from the computed property's dependencies after calling their `unsubscribe` methods, if possible.\r\n\r\n### computed#dismiss()\r\n\r\nRemoves all of the computed property's dependencies. Equivalent to calling `computed#unwatch` for each dependency.\r\n\r\n### computed#reset()\r\n\r\nSee `prop#reset()`. This method will fail if the computed observable property is not writable.\r\n\r\n### computed.fn\r\n\r\nAn object containing attributes that will be applied to new computed observable properties.\r\n\r\n# Acknowledgements\r\n\r\nThis library was heavily inspired by [Steve Sanderson's knockout.js project](https://github.com/SteveSanderson/knockout).\r\n\r\n# License\r\n\r\nThe MIT/Expat license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}